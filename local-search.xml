<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hexo 图片路径生成问题</title>
    <link href="/2024/09/26/2024092600/"/>
    <url>/2024/09/26/2024092600/</url>
    
    <content type="html"><![CDATA[<p>使用hexo进行博客部署时，图片路径生成出现如下问题</p><p>预期元素应该为:<br><code>&lt;img src=&quot;/img/assets.avif&quot; alt=&quot;Terraform deployment workflow&quot;&gt;</code><br>但实际是<br><code>&lt;img src=&quot;/.io//assets.avif&quot; alt=&quot;Terraform deployment workflow&quot;&gt;</code></p><p>hexo版本配置信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">INFO  Validating config<br>hexo: 7.2.0<br>hexo-cli: 4.3.2<br>os: darwin 23.5.0 14.5<br><br>node: 20.5.1<br>acorn: 8.10.0<br>ada: 2.5.1<br>ares: 1.19.1<br><span class="hljs-built_in">base64</span>: 0.5.0<br>brotli: 1.0.9<br>cjs_module_lexer: 1.2.2<br>cldr: 43.1<br>icu: 73.2<br>llhttp: 8.1.1<br>modules: 115<br>napi: 9<br>nghttp2: 1.55.1<br>openssl: 3.1.2<br>simdutf: 3.2.14<br>tz: 2023c<br>undici: 5.22.1<br>unicode: 15.0<br>uv: 1.46.0<br>uvwasi: 0.0.18<br>v8: 11.3.244.8-node.10<br>zlib: 1.2.11<br></code></pre></td></tr></table></figure><p>根据网上<a href="https://hexo.io/zh-cn/docs/asset-folders">线索</a>，修改hexo的<code>\node_modules\hexo-asset-image\index.js </code> 26行。<br>原：<br><code>link = link.substring(beginPos, endPos) + &#39;/&#39; + appendLink;</code><br>改为(根据自己情况)：<br><code>link = &#39;img/&#39; + appendLink;</code></p><p>经过 <code>hexo g</code> 后生成的图像元素即与预期元素<br><code>&lt;img src=&quot;/img/assets.avif&quot; alt=&quot;Terraform deployment workflow&quot;&gt;</code><br>相同。</p>]]></content>
    
    
    <categories>
      
      <category>异常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang map</title>
    <link href="/2024/09/18/2024091800/"/>
    <url>/2024/09/18/2024091800/</url>
    
    <content type="html"><![CDATA[<ul><li><h2 id="引"><a href="#引" class="headerlink" title="引"></a>引</h2></li></ul><p>维基百科里这样定义 map：</p><blockquote><p>In computer science, an associative array, map, symbol table, or dictionary is an abstract data type composed of a collection of (key, value) pairs, such that each possible key appears at most once in the collection.</p></blockquote><ul><li><h2 id="算法基础"><a href="#算法基础" class="headerlink" title="算法基础"></a>算法基础</h2></li></ul><p>在<code>golang</code>中，map的实现主要是基于hash算法。而hash算法常常会出现碰撞的问题，一般有两种方式进行应对，一是链表地址(golang就采用了此方式)，再就是开放寻址法。</p><ul><li><h3 id="hash表-单向散列表"><a href="#hash表-单向散列表" class="headerlink" title="hash表(单向散列表)"></a>hash表(单向散列表)</h3></li></ul><p>通过建立key与elem的映射，达到高效查找key对应的elem，一般时间复杂度为O(1)。<br>举个简单的例子：</p><blockquote><p>仅用一个数组来实现哈希表。在哈希表中，我们将数组中的每个空位称为桶（bucket），每个桶可存储一个键值对。因此，查询操作就是找到 key 对应的桶，并在桶中获取 value 。<br>那么，如何基于 key 定位对应的桶呢？这是通过哈希函数（hash function）实现的。哈希函数的作用是将一个较大的输入空间映射到一个较小的输出空间<br>输入一个 key ，哈希函数的计算过程分为以下两步。</p><ol><li><p>通过某种哈希算法 hash() 计算得到哈希值。</p></li><li><p>将哈希值对桶数量（数组长度）capacity 取模，从而获取该 key 对应的数组索引 index 。<br><code>index = hash(key) % capacity</code></p></li></ol><p>随后，我们就可以利用 index 在哈希表中访问对应的桶，从而获取 value 。</p><p>设数组长度 capacity &#x3D; 100、哈希算法 hash(key) &#x3D; key ，易得哈希函数为 key % 100 。<br><img src="/img/hash_function.png"></p></blockquote><ul><li><h3 id="hash冲突"><a href="#hash冲突" class="headerlink" title="hash冲突"></a>hash冲突</h3></li></ul><p>从本质上看，哈希函数的作用是将所有 <code>key</code> 构成的输入空间映射到数组所有索引构成的输出空间，而输入空间往往远大于输出空间。因此，<strong>理论上一定存在“多个输入对应相同输出”的情况</strong>。<br>对于上述示例中的哈希函数，当输入的 <code>key</code> 后两位相同时，哈希函数的输出结果也相同。例如，查询学号为 12836 和 20336 的两个学生时，我们得到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">12836 % 100 = 36<br>20336 % 100 = 36<br></code></pre></td></tr></table></figure><p>两个学号指向了同一个姓名，这显然是不对的。我们将这种多个输入对应同一输出的情况称为哈希冲突（hash collision）<br><img src="/img/hash_collision.png"></p><blockquote><p>解决hash冲突有两种方法</p><ol><li>链式地址<br>在原始哈希表中，每个桶仅能存储一个键值对。链式地址（separate chaining）将单个元素转换为链表，将键值对作为链表节点，将所有发生冲突的键值对都存储在同一链表中。<br><img src="/img/hash_table_chaining.png"><br>基于链式地址实现的哈希表的操作方法发生了以下变化。</li></ol><ul><li><strong>查询元素</strong>：输入 <code>key</code> ，经过哈希函数得到桶索引，即可访问链表头节点，然后遍历链表并对比 <code>key</code> 以查找目标键值对。</li><li><strong>添加元素</strong>：首先通过哈希函数访问链表头节点，然后将节点（键值对）添加到链表中。</li><li><strong>删除元素</strong>：根据哈希函数的结果访问链表头部，接着遍历链表以查找目标节点并将其删除。<br>链式地址存在以下局限性。</li><li><strong>占用空间增大</strong>：链表包含节点指针，它相比数组更加耗费内存空间。</li><li><strong>查询效率降低</strong>：因为需要线性遍历链表来查找对应元素。<br>值得注意的是，当链表很长时，查询效率 $O(n)$ 很差。<strong>此时可以将链表转换为“AVL 树”或“红黑树”</strong>，从而将查询操作的时间复杂度优化至 $O(\log n)$ 。</li></ul><ol start="2"><li>开放寻址<br><u>开放寻址（open addressing）</u>不引入额外的数据结构，而是通过“多次探测”来处理哈希冲突，探测方式主要包括线性探测、平方探测和多次哈希等。<br>下面以线性探测为例，介绍开放寻址哈希表的工作机制。<br>线性探测采用固定步长的线性搜索来进行探测，其操作方法与普通哈希表有所不同。</li></ol><ul><li><strong>插入元素</strong>：通过哈希函数计算桶索引，若发现桶内已有元素，则从冲突位置向后线性遍历（步长通常为 $1$ ），直至找到空桶，将元素插入其中。</li><li><strong>查找元素</strong>：若发现哈希冲突，则使用相同步长向后进行线性遍历，直到找到对应元素，返回 <code>value</code> 即可；如果遇到空桶，说明目标元素不在哈希表中，返回 <code>None</code> 。<br>下图展示了开放寻址（线性探测）哈希表的键值对分布。根据此哈希函数，最后两位相同的 <code>key</code> 都会被映射到相同的桶。而通过线性探测，它们被依次存储在该桶以及之下的桶中。<br><img src="/img/hash_table_linear_probing.png"><br>然而，<strong>线性探测容易产生“聚集现象”</strong>。具体来说，数组中连续被占用的位置越长，这些连续位置发生哈希冲突的可能性越大，从而进一步促使该位置的聚堆生长，形成恶性循环，最终导致增删查改操作效率劣化。<br>值得注意的是，<strong>我们不能在开放寻址哈希表中直接删除元素</strong>。这是因为删除元素会在数组内产生一个空桶 <code>None</code> ，而当查询元素时，线性探测到该空桶就会返回，因此在该空桶之下的元素都无法再被访问到，程序可能误判这些元素不存在.<br>为了解决该问题，我们可以采用<u>懒删除（lazy deletion）</u>机制：它不直接从哈希表中移除元素，<strong>而是利用一个常量 <code>TOMBSTONE</code> 来标记这个桶</strong>。在该机制下，<code>None</code> 和 <code>TOMBSTONE</code> 都代表空桶，都可以放置键值对。但不同的是，线性探测到 <code>TOMBSTONE</code> 时应该继续遍历，因为其之下可能还存在键值对。<br>然而，<strong>懒删除可能会加速哈希表的性能退化</strong>。这是因为每次删除操作都会产生一个删除标记，随着 <code>TOMBSTONE</code> 的增加，搜索时间也会增加，因为线性探测可能需要跳过多个 <code>TOMBSTONE</code> 才能找到目标元素。<br>为此，考虑在线性探测中记录遇到的首个 <code>TOMBSTONE</code> 的索引，并将搜索到的目标元素与该 <code>TOMBSTONE</code> 交换位置。这样做的好处是当每次查询或添加元素时，元素会被移动至距离理想位置（探测起始点）更近的桶，从而优化查询效率。</li></ul></blockquote><p>容易想到，哈希表容量越大，多个 key 被分配到同一个桶中的概率就越低，冲突就越少。因此，我们可以通过扩容哈希表来减少哈希冲突。</p><ul><li><h3 id="hash扩容"><a href="#hash扩容" class="headerlink" title="hash扩容"></a>hash扩容</h3></li></ul><p>类似于数组扩容，哈希表扩容需将所有键值对从原哈希表迁移至新哈希表，非常耗时；并且由于哈希表容量 <code>capacity</code> 改变，我们需要通过哈希函数来重新计算所有键值对的存储位置，这进一步增加了扩容过程的计算开销。为此，编程语言通常会预留足够大的哈希表容量，防止频繁扩容。<br>负载因子（load factor）是哈希表的一个重要概念，其定义为哈希表的元素数量除以桶数量，用于衡量哈希冲突的严重程度，<strong>也常作为哈希表扩容的触发条件</strong>。例如在 golang 中，当负载因子超过 $0.65$ 时，系统会将哈希表扩容至原先的 $2$ 倍。</p><ul><li><h2 id><a href="#" class="headerlink" title></a></h2></li></ul>]]></content>
    
    
    <categories>
      
      <category>面试题</category>
      
      <category>基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>hash</tag>
      
      <tag>map</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>想写的角色</title>
    <link href="/2024/09/12/2024091200/"/>
    <url>/2024/09/12/2024091200/</url>
    
    <content type="html"><![CDATA[<p>角色冷静 果决 强大 严谨 但是由于所属势力的倾颓 最终败给了一直以其为目标的新一代</p>]]></content>
    
    
    <categories>
      
      <category>idea snapshot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>goroutine 排队、调度</title>
    <link href="/2024/06/26/2024062500/"/>
    <url>/2024/06/26/2024062500/</url>
    
    <content type="html"><![CDATA[<p>有以下代码：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">question</span><span class="hljs-params">(cnt <span class="hljs-type">int</span>)</span></span> &#123;<br>runtime.GOMAXPROCS(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= cnt; i++ &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br><span class="hljs-built_in">println</span>(n)<br>&#125;(i)<br>&#125;<br><br>wg.Wait()<br>&#125;<br></code></pre></td></tr></table></figure><p>给出不同范围的cnt的输出是什么</p><p>当 <code>cnt</code> 小于等于 257 时，输出为序列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">cnt<br>1<br>2<br>3<br>...<br>cnt-1<br></code></pre></td></tr></table></figure><p>当 <code>cnt</code> 大于等于 258 时，输出为 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">cnt<br>*<br>...<br>1<br>*<br>...<br>*<br>...<br>2<br>...<br></code></pre></td></tr></table></figure><p>首先，解释为什么第一个一般都是<code>cnt</code>, 在循环中<code>cnt</code>最后一个被加入到协程队列中，其实会被加到<code>runnext</code>中，在协程队列中第一个会执行<code>runnext</code>，然后会从<code>本地runq</code>中取协程，但是本地队列中一旦加入超过256个协程，就会切出128个到<code>全局runq</code>中，如此往复。同时每当<code>本地runq</code>执行了61次后就会从<code>全局runq</code>中获取一个进行执行，主要是防止<code>全局runq</code>中的协程被饿死。于是就会有如上输出。</p>]]></content>
    
    
    <categories>
      
      <category>面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>groutine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器与服务器实时通信</title>
    <link href="/2024/06/04/2024060400/"/>
    <url>/2024/06/04/2024060400/</url>
    
    <content type="html"><![CDATA[<ul><li><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2></li><li><h3 id="Long-Polling"><a href="#Long-Polling" class="headerlink" title="Long-Polling"></a>Long-Polling</h3></li></ul><p>长轮询是一种模拟HTTP上服务器推送的技术，通过保持连接打开状态直到有新数据可用来减少不必要的网络流量。</p><ul><li><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3></li></ul><p>WebSocket提供了一个全双工的、长期存在的连接通道，适合需要低延迟的应用场景，如实时聊天、游戏和金融交易平台。</p><ul><li><h3 id="服务器发送事件（Server-Sent-Events-SSE）"><a href="#服务器发送事件（Server-Sent-Events-SSE）" class="headerlink" title="服务器发送事件（Server-Sent Events, SSE）"></a>服务器发送事件（Server-Sent Events, SSE）</h3></li></ul><p>服务器发送事件（Server-Sent Events, SSE）是一种从服务器单向推送更新到客户端的简单方法，适用于只需要服务器更新的场景，如实时新闻源、体育比分或需要实时更新的情况。SSE在连接断开时会自动重连，管理起来比WebSocket更简单。</p><ul><li><h3 id="WebTransport"><a href="#WebTransport" class="headerlink" title="WebTransport"></a>WebTransport</h3></li></ul><p>WebTransport是一个基于HTTP&#x2F;3 QUIC协议的新兴API，旨在实现高效、低延迟的客户端和服务器通信。它支持多流传输、可靠和不可靠的数据以及乱序发送数据，适用于高性能应用，如实时游戏和流媒体。然而，WebTransport目前仍处于工作草案阶段，支持度不广。</p><ul><li><h3 id="WebRTC"><a href="#WebRTC" class="headerlink" title="WebRTC"></a>WebRTC</h3></li></ul><p>WebRTC是一个用于浏览器和移动应用之间实时通信的开源项目，支持音频、视频和数据的点对点交换，但不直接与上述技术相比较，因为它主要用于客户端之间的交互，而非服务器客户端通信。</p><ul><li><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2></li><li>基础限制</li></ul><ol><li>只有WebSocket和WebTransport支持双向通信。</li><li>长轮询理论上可以双向通信，但不推荐，因为发送新数据到现有的长轮询连接会需要额外的HTTP请求。</li><li>SSE不支持向服务器发送数据，只能接收服务器的初始请求，且通常不能在HTTP正文中发送POST数据，但可以使用一些库（如eventsource polyfill）来扩展其功能。</li></ol><ul><li><p>浏览器的连接限制：<br>大多数现代浏览器每个域名允许六个连接，这限制了持续服务器到客户端消息传递方法的使用。尽管可以通过使用HTTP&#x2F;2或HTTP&#x2F;3来解决，这些协议使用单一连接并利用多路复用技术，但仍有默认的最大并发流设置（通常是100个并发流）。<br>在移动应用中，操作系统可能会关闭后台应用的开放连接，导致WebSocket等技术难以维持。在这种情况下，通常使用移动推送通知来更有效地发送数据。<br>企业环境中的代理和防火墙可能阻止非HTTP连接，使得WebSocket等技术难以集成，而SSE使用标准HTTP请求，可能更容易适应这些环境。</p></li><li><h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2></li></ul><p>WebSocket、SSE和WebTransport在低延迟、高吞吐量和可扩展性方面表现相似，但WebTransport依赖于新的HTTP&#x2F;3协议，未来可能会有更多性能优化。<br>长轮询在延迟和吞吐量方面较差，因为它依赖于频繁建立新的HTTP连接。</p><ul><li><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2></li></ul><ol><li>SSE适合需要频繁服务器到客户端更新的简单场景，如新闻提要和实时数据流。</li><li>WebSocket适用于需要持续双向通信的应用，如游戏和聊天应用。</li><li>WebTransport是未来的趋势，但目前支持度不足，适用于需要高效多流通信的场景。</li><li>长轮询现在已被其他技术取代，不建议作为首选方案。</li></ol><p>在构建实时应用程序时，应考虑这些技术的局限性和适用场景，并确保处理可能的连接问题，如客户端重新连接时可能错过的事件，以及公司网络环境中可能遇到的代理和防火墙问题。</p><h2 id="ref："><a href="#ref：" class="headerlink" title="ref："></a>ref：</h2><p><a href="https://rxdb.info/articles/websockets-sse-polling-webrtc-webtransport.html">WebSockets vs Server-Sent-Events vs Long-Polling vs WebRTC vs WebTransport</a></p>]]></content>
    
    
    <categories>
      
      <category>技术方案</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebSocket</tag>
      
      <tag>SSE</tag>
      
      <tag>WebTransport</tag>
      
      <tag>Long-Polling</tag>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>working--terraform实践</title>
    <link href="/2024/05/30/2024053001/"/>
    <url>/2024/05/30/2024053001/</url>
    
    <content type="html"><![CDATA[<ul><li><h3 id="选型对比"><a href="#选型对比" class="headerlink" title="选型对比"></a>选型对比</h3></li></ul><p>之前现场需要做云上资源的运维，然后客户需要一个可靠的运维方案，经过粗筛最终决定在<code>terraform</code>和<code>ansible</code>中进行抉择。</p><table><thead><tr><th>特性</th><th>Terraform</th><th>Ansible</th></tr></thead><tbody><tr><td><strong>主要用途</strong></td><td>声明式基础设施管理，资源创建和更新</td><td>配置管理，应用部署，自动化任务</td></tr><tr><td><strong>语法</strong></td><td>HCL (HashiCorp Configuration Language) 或 JSON</td><td>YAML</td></tr><tr><td><strong>执行模型</strong></td><td>中心化的声明式，资源状态管理</td><td>分布式的任务驱动，基于事件</td></tr><tr><td><strong>资源管理</strong></td><td>明确的资源创建、更新和删除</td><td>主要关注配置状态，不直接管理资源生命周期</td></tr><tr><td><strong>多云支持</strong></td><td>广泛支持，跨平台，多云友好</td><td>支持多种云，但更侧重于本地和私有云</td></tr><tr><td><strong>依赖管理</strong></td><td>内建依赖解析，自动排序资源应用</td><td>需要手动管理依赖关系</td></tr><tr><td><strong>变更管理</strong></td><td><code>terraform plan</code> 预先查看变更，<code>apply</code> 应用变更</td><td>通过playbook执行，没有预览变更的功能</td></tr><tr><td><strong>执行方式</strong></td><td>通过命令行工具执行，需要安装Terraform CLI</td><td>通过playbook执行，通常通过Ansible Tower或SSH</td></tr><tr><td><strong>无代理部署</strong></td><td>不需要目标主机上的代理</td><td>需要在目标主机上安装Agent或使用SSH</td></tr><tr><td><strong>安全性</strong></td><td>支持访问控制，如Terraform Cloud</td><td>支持加密凭据，但需要额外的管理</td></tr><tr><td><strong>社区支持</strong></td><td>活跃的社区，丰富的模块和插件</td><td>广泛的社区，丰富的角色和模块</td></tr></tbody></table><p>对比下来，<code>terraform</code>可以对变更进行预览，也能直接管理资源，故选择<code>terraform</code>。</p><ul><li><h3 id="terraform-简述"><a href="#terraform-简述" class="headerlink" title="terraform 简述"></a>terraform 简述</h3></li></ul><p>terraform 主要是</p><p><img src="/img/assets.avif" alt="Terraform deployment workflow"></p>]]></content>
    
    
    <categories>
      
      <category>技术方案</category>
      
    </categories>
    
    
    <tags>
      
      <tag>devops</tag>
      
      <tag>terraform</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在github发布自己的依赖</title>
    <link href="/2024/05/30/2024053000/"/>
    <url>/2024/05/30/2024053000/</url>
    
    <content type="html"><![CDATA[<p>平时工作积累了一些用起来比较顺手的函数，数据结构的封装，整理一下，发布成一个包。</p><h3 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1. 创建仓库"></a>1. 创建仓库</h3><p>创建一个github仓库，根据自己的情况选择公开或者私有，再根据功能范围起一个库名。</p><h3 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2. 初始化"></a>2. 初始化</h3><p>将项目拉到本地，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go mod init &lt;你的库名&gt;<br></code></pre></td></tr></table></figure><h3 id="3-添加库功能"><a href="#3-添加库功能" class="headerlink" title="3. 添加库功能"></a>3. 添加库功能</h3><p>把需要发布的功能函数添加到项目中，其中不希望被引用的功能，可以放到项目下<code>internal/</code>路径中</p><h3 id="4-push"><a href="#4-push" class="headerlink" title="4. push"></a>4. push</h3><p>将变更完的项目推送到github</p><h3 id="5-引用"><a href="#5-引用" class="headerlink" title="5. 引用"></a>5. 引用</h3><p>在其他项目中，执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go get -v github.com/&lt;你的github用户名&gt;/&lt;你的库名&gt;<br></code></pre></td></tr></table></figure><p>然后就结束啦！</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
      <tag>golang</tag>
      
      <tag>go modules</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux串口通信 接收信息不完整 读取不全</title>
    <link href="/2024/05/17/2024051602/"/>
    <url>/2024/05/17/2024051602/</url>
    
    <content type="html"><![CDATA[<p>类似这种 ready.o是我用来读取串口信息的一个程序 执行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost testPlc]# ./ready.o <br>0       02<br>1       30<br>2       30<br>3       46<br>4       46<br>5       31<br>6       03<br>7       32<br>8       bd<br></code></pre></td></tr></table></figure><p>按照通信协议，串口应返回的的是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">0       02<br>1       30<br>2       30<br>3       46<br>4       46<br>5       31<br>6       03<br>7       32<br>8       31<br>9       38<br></code></pre></td></tr></table></figure><p>并且其他几个指令，也是与通信协议所要求的返回的位数不同，并且最后一位也有是错误的，使用串口助手有没有问题。所以推测是接收区只有8位，然后代码里的接收buffer设置为128，所以应该是底层的原因，所以采用了select进行等待，最终实现了完整读取串口信息<br>代码示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SetBench</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *msg, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *recv)</span> &#123;<br>    fd_set fs_read;<br>    <span class="hljs-type">int</span> fd = nFd;<br><span class="hljs-comment">//nFd是串口句柄</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> buf[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">time</span>;</span><br>    FD_ZERO(&amp;fs_read);<br>    FD_SET(fd, &amp;fs_read);<br><br>    time.tv_sec = <span class="hljs-number">2</span>;<br>    time.tv_usec = <span class="hljs-number">0</span>;<br>    write(fd, msg, <span class="hljs-built_in">strlen</span>(msg));<br><br>    <span class="hljs-keyword">while</span> (select(fd + <span class="hljs-number">1</span>, &amp;fs_read, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;time) &gt; <span class="hljs-number">0</span>) &#123;<br>        len = read(fd, buf, <span class="hljs-keyword">sizeof</span>(recv));<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">8</span> == len) &#123;<br>            <span class="hljs-built_in">strncpy</span>(recv + count, buf, <span class="hljs-number">8</span>);<br>            count += <span class="hljs-number">8</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (len &gt; <span class="hljs-number">0</span> &amp;&amp; len &lt; <span class="hljs-number">8</span>) &#123;<br>            <span class="hljs-built_in">strncpy</span>(recv + count, buf, len);<br>            count += len;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>异常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>串口通信</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sed: -e expression #1, char 0: no previous regular expression</title>
    <link href="/2024/05/16/2024051601/"/>
    <url>/2024/05/16/2024051601/</url>
    
    <content type="html"><![CDATA[<p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -i -e <span class="hljs-string">&quot;s/<span class="hljs-variable">$ori</span>/<span class="hljs-variable">$curr</span>/g&quot;</span> <span class="hljs-variable">$CONF</span><br></code></pre></td></tr></table></figure><p>报错 <code>sed: -e expression #1, char 0: no previous regular expression</code></p><p>是因为 <code>$ori</code> 为空</p>]]></content>
    
    
    <categories>
      
      <category>异常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sed</tag>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git走全局代理</title>
    <link href="/2024/05/16/2024051600/"/>
    <url>/2024/05/16/2024051600/</url>
    
    <content type="html"><![CDATA[<ol><li><p>先找到全局代理端口 一般为 7890</p></li><li><p>执行代理命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># http ｜ https</span><br>git config --global http.proxy 127.0.0.1:7890<br>git config --global https.proxy 127.0.0.1:7890<br><span class="hljs-comment">#socks5代理</span><br>git config --global http.proxy socks5 127.0.0.1:7890<br>git config --global https.proxy socks5 127.0.0.1:7890<br><span class="hljs-comment">#关闭代理</span><br>git config --global --<span class="hljs-built_in">unset</span> http.proxy<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>proxy</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用hexo部署博客</title>
    <link href="/2024/05/15/2024051500/"/>
    <url>/2024/05/15/2024051500/</url>
    
    <content type="html"><![CDATA[<p>可以参考<a href="https://zhuanlan.zhihu.com/p/667089756">hexo&amp;github 搭建博客（保姆级）</a></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
      <tag>blog</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
